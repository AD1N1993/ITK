{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/Login/newAuthReducer.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","values","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","status","error","isInitialized","setAppErrorAC","setAppStatusAC","setIsInitializedAC","appReducer","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","createAsyncThunk","thunkAPI","then","res","tasks","items","updateTaskTC","domainModel","getState","task","find","t","apiModel","deadline","description","priority","startDate","resultCode","updateTaskAC","catch","console","warn","removeTaskAC","addTaskAC","todoListId","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","resetForm","validate","errors","test","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","LogoutHandler","AppBar","position","Toolbar","display","justifyContent","Typography","marginLeft","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fb1b302.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': \"2c4c11b3-b7ca-4a85-9ffe-5b500c4db141\"\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(values:LoginParamsType){\r\n        return instance.post<ResponseType<{userId?:number}>>('auth/login',values);\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<ResponseUserDataType>>('auth/me');\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(\"auth/login\");\r\n    }\r\n}\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\ntype ResponseUserDataType={\r\n    id: number\r\n    email:string\r\n    login: string\r\n}\r\n","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers:{\n        setIsLoggedInAC(state,action:PayloadAction<{value:boolean}>){\n            state.isLoggedIn = action.payload.value;\n        }\n    }\n})\n\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedInAC} = slice.actions;\n// actions\n// export const setIsLoggedInAC = (value: boolean) =>\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    authAPI.login(data).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value:true}))\n            dispatch(setAppStatusAC({status:'succeeded'}))\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// types","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/newAuthReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value;\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;//(state: InitialStateType = initialState, action: ActionsType):\r\nexport const {setIsInitializedAC, setAppErrorAC, setAppStatusAC} = slice.actions;\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n        }\r\n        dispatch(setIsInitializedAC({value: true}))\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}));\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}));\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}));\r\n    dispatch(setAppStatusAC({status: 'failed'}));\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {\r\n    RequestStatusType,\r\n    SetAppErrorActionType,\r\n    SetAppStatusActionType,\r\n    setAppStatusAC,\r\n    initializeAppTC\r\n} from \"../../app/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state,action:PayloadAction<{id:string}>)=>{\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id);\r\n            if(index > -1){state.splice(index,1)}\r\n        },\r\n        addTodolistAC:(state,action:PayloadAction<{todolist:TodolistType}>)=>{\r\n            state.unshift({...action.payload.todolist,filter: 'all',entityStatus:'idle'})\r\n        },\r\n        changeTodolistTitleAC:(state,action:PayloadAction<{id:string, title:string}>)=>{\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC:(state,action:PayloadAction<{id: string, filter: FilterValuesType}>)=>{\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC:(state,action:PayloadAction<{id: string, status: RequestStatusType}>)=>{\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC:(state,action:PayloadAction<{todolists: Array<TodolistType>}>)=>{\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        }\r\n    },\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {removeTodolistAC,addTodolistAC,changeTodolistTitleAC,changeTodolistFilterAC,changeTodolistEntityStatusAC,setTodolistsAC} = slice.actions;\r\n\r\n\r\n\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists:res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({status:'loading',id:todolistId}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC({id:todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist:res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC({id:id,title:title} ));\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\"tasks/fetchTasks\", (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    return todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {tasks, todolistId}\r\n        })\r\n})\r\n// thunks\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, todolistId, model: domainModel})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = [];\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        });\r\n    },\r\n})\r\nexport const tasksReducer = slice.reducer;\r\n\r\n// actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC} = slice.actions\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\ndebugger\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter:value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./newAuthReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from 'react-router-dom';\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch();\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            } else if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 5) {\n                errors.password = 'Must be 5 characters or more';\n            }\n            return errors;\n        },\n\n    })\n    if (isLoggedIn) {\n        return <Redirect to={\"/\"}/>\n    }\n    return <Grid container justify=\"center\" >\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: griv1993@gmail.com</p>\n                        <p>Password: >hbqUhbdbwrbq</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n\n\n                        />\n                        {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps(\"rememberMe\")}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\nexport type FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { setAppErrorAC } from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, logoutTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n    const LogoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [dispatch])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display:\"flex\", justifyContent:\"space-between\"}}>\r\n\r\n                    <Typography variant=\"h6\">\r\n                       Tasks\r\n                    </Typography>\r\n                    <Button style={{marginLeft:\"20px\"}}  color=\"inherit\" onClick={LogoutHandler}>{isLoggedIn ? \"logout\" : \"Login \"} </Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed >\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={\"/404\"} render={() => <h1>Error 404. Page not found.</h1>}/>\r\n                    <Redirect from={\"*\"} to={\"/404\"}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/newAuthReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware =>  getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}